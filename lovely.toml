[manifest]
version = "1.0.0"
dump_lua = true
priority = 11

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "if obj and obj.set_badges and type(obj.set_badges) == 'function' then"
position = 'before'
payload = """if obj and obj.type and obj.type.set_badges and type(obj.type.set_badges) == 'function' then
    obj.type:set_badges(obj, card, badges)
end
"""
match_indent = true

[[patches]]
# Localize special planets with special variables.
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Planet' then"
position = "before"
payload = '''
elseif _c.set == 'Planet' and _c.config.target then
    local spec_planet = G.GAME.spec_planets[_c.config.target]
    local level = spec_planet.level
    local v1 = spec_planet.v1
    local v2 = spec_planet.v2
    loc_vars = {
        level, localize(_c.config.target), v1, v2,
        colours = {(level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, level)])}
    }
    localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}
'''
match_indent = true

## Blinds in info queue
#[[patches]]
#[patches.pattern]
#target = "functions/common_events.lua"
#pattern = "elseif _c.set == 'Tarot' then"
#position = "before"
#match_indent = true
#payload = '''elseif _c.set == 'Blind' then
#    loc_vars = (_c.collection_loc_vars and type(_c.collection_loc_vars) == 'function' and _c.collection_loc_vars()) or _c.vars
#    localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}
#'''

[[patches]]
# I can't be arsed to figure out the bugs and mysteries and implications of in_pool
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif v.set == 'Planet' then"
position = "before"
payload = '''elseif v.can_appear and type(v.can_appear) == 'function' then
    add = v:can_appear()
'''
match_indent = true

# old patch specific to planets
#[patches.pattern]
#target = "functions/common_events.lua"
#pattern = "if (not v.config.softlock or G.GAME.hands[v.config.hand_type].played > 0) then"
#position = "at"
#payload = '''
#if not v.config.softlock or (v.can_appear and v:can_appear()) or (v.config.hand_type and G.GAME.hands[v.config.hand_type].played > 0) then
#'''

[[patches]]
# Interest calculation continuous rather than discrete
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.dollars >= 5 and not G.GAME.modifiers.no_interest then"
position = "at"
payload = '''
if not G.GAME.modifiers.no_interest and G.GAME.interest_amount > 0 and (G.GAME.dollars + (G.GAME.interest_basis_modifier or 0)) / (5 / (G.GAME.interest_amount)) >= 1 then
    local interest = BALIATRO.calculate_interest_amount()
    local max_possible_interest = BALIATRO.calculate_interest_maximum()
    add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = interest})
    pitch = pitch + 0.06
    if not G.GAME.seeded and not G.GAME.challenge then
        if interest == max_possible_interest then
            G.PROFILES[G.SETTINGS.profile].career_stats.c_round_interest_cap_streak = G.PROFILES[G.SETTINGS.profile].career_stats.c_round_interest_cap_streak + 1
        else
            G.PROFILES[G.SETTINGS.profile].career_stats.c_round_interest_cap_streak = 0
        end
    end
    check_for_unlock({type = 'interest_streak'})
    dollars = dollars + interest
end

if false then
'''
match_indent = true


# booster rerolls
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''for i = 1, G.GAME.shop.joker_max - #G.shop_jokers.cards do
  local new_shop_card = create_card_for_shop(G.shop_jokers)
  G.shop_jokers:emplace(new_shop_card)
  new_shop_card:juice_up()
end'''
position = 'after'
payload = '''if G.GAME.current_round.booster_rerolls > 0 then
    G.GAME.current_round.booster_rerolls = G.GAME.current_round.booster_rerolls - 1
    local changed = false
    for i = 1, #G.GAME.current_round.used_packs do
        if G.GAME.current_round.used_packs[i] ~= 'USED' then
            G.GAME.current_round.used_packs[i] = get_pack('shop_pack').key
            changed = true
        end
    end
    if changed then
        for i = 1, #G.shop_booster.cards do
            local card = G.shop_booster.cards[i]
            local p = card.ability.booster_pos
            local new_center = G.GAME.current_round.used_packs[p]
            card:set_ability(G.P_CENTERS[new_center])
            card:juice_up()
        end
    end
end
'''
match_indent = true

# upgradable: badge
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end, self)'
position = 'before'
payload = '''if self.ability.set == "Joker" and self.config.center.upgrades_to then
    badges[#badges + 1] = 'upgradable'
end
'''
match_indent = true

# upgradable: info queue
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "v = (v == 'holographic' and 'holo' or v)"
position = 'after'
payload = '''if v == 'upgradable' then
    if _c.upgrades_to then
        local name = localize{type='name_text', key=_c.upgrades_to, set='Joker'}
        info_queue[#info_queue+1] = {key = 'baliatro_upgradable', set = 'Other', vars = {name}}
    end
end
'''
match_indent = true

# upgradable: badge color
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "return G.BADGE_COL[key] or {1, 0, 0, 1}"
position = 'before'
payload = "G.BADGE_COL['upgradable'] = HEX '9700b1'"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = 'at'
payload = 'nominal_chips = (not self.config.center.replace_base_card and self.base.nominal > 0 and self.base.nominal) or nil,'
match_indent = true

# reset base bonus when setting ability7
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.bonus = self.ability.bonus - old_center.config.bonus"
position = 'at'
payload = "self.ability.bonus = 0"
match_indent = true

# edition augment
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "-- TARGET: main scoring on played cards"
position = 'after'
payload = '''if card.edition then
    local ed = G.P_CENTERS[card.edition.key]
    if ed.augment and type(ed.augment) == 'function' then
        ed:augment(card, context, ret.playing_card, nil)
    end
end
'''
match_indent = true

# voucher repeating
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if not G.GAME.used_vouchers[v.key] then '
position = 'at'
payload = 'if not G.GAME.used_vouchers[v.key] or BALIATRO.can_repeat_vouchers() then '
match_indent = true

# count number of times each rank is scored
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "-- TARGET: main scoring on played cards"
position = 'after'
payload = '''
if not SMODS.has_no_rank(card) then
    G.GAME.ranks_scored[card.base.value] = G.GAME.ranks_scored[card.base.value] + 1
end
'''
match_indent = true

# count if card was discarded this ante
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "v.ability.played_this_ante = nil"
position = 'before'
payload = 'v.ability.discarded_this_ante = nil'
match_indent = true

# flexible discard target 1
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "-- TARGET: pre_discard"
position = 'after'
payload = """local target = G.discard
local shuffle_target = false
if G.GAME.blind and G.GAME.blind:is_discarding_to_deck() or (G.GAME.discard_to_deck and G.GAME.discard_to_deck > 0)  then
    target = G.deck
    shuffle_target = true
end
"""
match_indent = true

# flexible discard target 2
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = 'at'
payload = """G.hand.highlighted[i].ability.discarded_this_round = true
draw_card(G.hand, target, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"""
match_indent = true

# flexible discard target 3
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "-- TARGET: effects after cards destroyed in discard"
position = 'after'
payload = "if shuffle_target then target:shuffle('dcfh' .. G.GAME.round_resets.ante) end"
match_indent = true

# post_discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "-- TARGET: effects after cards destroyed in discard"
position = 'after'
payload = """if G.GAME.blind then
    G.GAME.blind:after_discard(cards)
end
SMODS.calculate_context({post_discard = true})
"""
match_indent = true

# debug
# [[patches]]
# [patches.pattern]
# target = "functions/common_events.lua"
# pattern = 'if _c.specific_vars then specific_vars = _c.specific_vars end'
# position = 'before'
# payload = 'BALIATRO.tprint({center=_c, specific_vars=specific_vars}, 0, 3)'
# match_indent = true

# act unhighlighted on discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '-- context.remove_playing_cards from discard'
position = 'before'
payload = '''for i, card in ipairs(BALIATRO.collect_hand_unhighlighted()) do
    local removed = false
    local effects = {}
    SMODS.calculate_context({other_discarded = true, other_card = card, full_hand = G.hand.highlighted}, effects)
    SMODS.trigger_effects(effects)
    for _, eval in pairs(effects) do
        if type(eval) == 'table' then
            for key, eval2 in pairs(eval) do
                if key == 'remove' or (type(eval2) == 'table' and eval2.remove) then removed = true end
            end
        end
    end
    if removed then
        destroyed_cards[#destroyed_cards + 1] = card
        if SMODS.has_enhancement(card, 'm_glass') then
            card:shatter()
        else
            card:start_dissolve()
        end
    end
end
'''
match_indent = true

# experimental
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '-- TARGET: adding to hand effects'
position = 'after'
payload = '''
local extra_cards = 0
for i, joker in ipairs(G.jokers.cards) do
    if not joker.debuff and joker.config.center.additional_scoring_cards and type(joker.config.center.additional_scoring_cards) == 'function' then
        extra_cards = extra_cards + joker.config.center:additional_scoring_cards(joker)
    end
end

extra_cards = math.min(extra_cards, #G.hand.cards)

for i = 1, extra_cards do
    table.insert(final_scoring_hand, G.hand.cards[i])
end
'''
match_indent = true

# protect wild cards from suit debuffs
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = 'if self.debuff.suit and card:is_suit(self.debuff.suit, true) then'
position = "after"
match_indent = true
payload = '''    for k, joker in ipairs(G.jokers.cards) do
        if SMODS.has_any_suit(card) and not joker.debuff and joker.ability.extra and type(joker.ability.extra) == 'table' and joker.ability.extra.protect_wild then return end
    end
'''

# Blinds: generic joker sold
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.set == 'Joker' and G.GAME.blind and G.GAME.blind.name == 'Verdant Leaf' then"
position = "at"
match_indent = true
payload = '''if self.ability.set == 'Joker' and G.GAME.blind and G.GAME.blind.config.blind and G.GAME.blind.config.blind.joker_sold and type(G.GAME.blind.config.blind.joker_sold) == 'function' then
    G.GAME.blind.config.blind:joker_sold(self)
elseif self.ability.set == 'Joker' and G.GAME.blind and G.GAME.blind.name == 'Verdant Leaf' then'''

# Pacts: do not make Audience with the Devil shiny
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.center:draw_shader('booster', nil, self.ARGS.send_to_shader)"
position = "at"
match_indent = true
payload = '''if not self.config.center.no_shine then
    self.children.center:draw_shader('booster', nil, self.ARGS.send_to_shader)
end'''


## Nice looking blind box
# Add custom info_queue box support
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'info_tip_from_rows(v, v.name),'
position = "at"
match_indent = true
payload = 'v.no_format and v[1] or info_tip_from_rows(v, v.name)'

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Blind' then"
position = "after"
match_indent = true
payload = '''
    desc_nodes[1] = BALIATRO.blind_uibox(_c)
    desc_nodes.no_format = true
elseif false then'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif desc_nodes ~= full_UI_table.main and not desc_nodes.name then"
position = "at"
match_indent = true
payload = "elseif desc_nodes ~= full_UI_table.main and not desc_nodes.name and _c.set ~= 'Blind' then"


## Audience with the Devil appearance
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.load_shop_booster then"
position = "before"
match_indent = true
payload = '''if not G.load_shop_vouchers then
    if G.GAME.audience_progress >= 1 and (not G.GAME.pacts_cannot_appear or G.GAME.pacts_cannot_appear <= 0) then
        G.shop_vouchers.config.card_limit = G.shop_vouchers.config.card_limit + 1
        local card = Card(G.shop_vouchers.T.x + G.shop_vouchers.T.w/2,
            G.shop_vouchers.T.y, G.CARD_W * 1.27, G.CARD_H * 1.27, G.P_CARDS.empty, G.P_CENTERS['p_baliatro_pact_1'],{bypass_discovery_center = true, bypass_discovery_ui = true})
        card.from_tag = true
        create_shop_card_ui(card, 'Booster', G.shop_vouchers)
        card:start_materialize()
        G.shop_vouchers:emplace(card)
        G.GAME.audience_progress = 0
        G.GAME.audience_progress_per_round = G.GAME.audience_progress_per_round + 3
    end
end'''

## Do not Invisible Joker pacts
#[[patches]]
#[patches.pattern]
#target = "card.lua"
#pattern = "if G.jokers.cards[i] ~= self then"
#position = "at"
#match_indent = true
#payload = "if G.jokers.cards[i] ~= self and BALIATRO.manipulable(G.jokers.cards[i]) then"

## Banned cards feature
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "localize{type = 'other', key = _c.key, nodes = desc_nodes, vars = specific_vars or _c.vars}"
position = "after"
match_indent = true
payload = 'if _c.append_banned_set then BALIATRO.generate_ban_set(_c.append_banned_set, desc_nodes) end'

#[[patches]]
#[patches.pattern]
#target = "functions/UI_definitions.lua"
#pattern = 'return {n=G.UIT.R, config={align = "cm", colour = lighten(G.C.GREY, 0.15), r = 0.1}, nodes={'
#position = "before"
#match_indent = true
#payload = '''if desc_nodes.append_set then
#    BALIATRO.generate_ban_set(desc_nodes.append_set, t)
#    desc_nodes.append_set = nil
#end'''

## Act on a card being rerolled out of shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = 'local c = G.shop_jokers:remove_card(G.shop_jokers.cards[i])'
position = "after"
match_indent = true
payload = 'SMODS.calculate_context({card_rerolled_from_shop = true, other_card = c})'
